# -*- coding: utf-8 -*-
"""DS_ALL_PRGMS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J6fyBz7YjvqW9iI3VB--KuKe9D3CfnPi

1 changing dimension of an array
"""

import numpy as np
x=np.array([1,2,3,4,5,6,7,8,9])
print("initial array ",x)
x.shape=[3,3]
print("After dimension change array ",x)
y=x.tolist()
print(" array into list ",y)



"""2. create and update null numpy array"""

x=np.zeros(10)
print(x)
print("Update the 6th value to 11")
x[6]=11
print(x)



"""exersise 1
3.element wise comparison
"""

import numpy as np
x = np.array([[12,13],[7,8]])
y = np.array([[1,23],[17,4]])
print("campare x with y ")
print("\nGreater")
print(np.greater(x,y))
print("\nGreater_Equal")
print(np.greater_equal(x,y))
print("\nlesser")
print(np.less(x,y))
print("\nless_equall")
print(np.less_equal(x,y))

"""

```
# This is formatted as code
```

4.array creation

array of all even numbers between10 and 30 """

import numpy as np
x=np.arange(10,60,2)
print("array of all even numbers between10 and 30  ")
print(x)

"""5.Identity matrix"""

import numpy as np
x=np.identity(3)
print("3X3 matrix \n")
print(x)

"""6.array to the textv file"""

import numpy as np
import os
x= np.arange(4).reshape(2,2)
print(x)

header ='col1 col2'
np.savetxt('temp.txt',x,fmt="%d",header=header)
result=np.loadtxt('temp.txt')
print(result)

"""7.Array Equality"""

import numpy as np
x=np.array([12,14])
y=np.array([16,14])
result = np.equal(x,y)
print(result)

"""Exersise 2 

8.Matrix operation-dot product  of a matrix
"""

import numpy as np

print("Enter the elements of 1st matrix 2X2")

elements=list(map(int,input().split()));
a=np.array(elements).reshape(2,2);

print("Enter the elements of 2nd matrix 2X2")
elements=list(map(int,input().split()));
b=np.array(elements).reshape(2,2);

print(a)
print(b)

np.dot(a,b)

"""9. TRANSPOSE of matrix"""

import numpy as np
a=np.arange(6).reshape(2,3)
print('first matrix')
print(a)

b=np.transpose(a)
print('transpose matrix')
print(b)

"""10.Trace of matrix"""

import numpy as np
a=np.arange(9).reshape(3,3)
print('first matrix')
print(a)

b=np.trace(a)
print('trace of matrix ie sum of diagonal elmt')
print(b)

"""11.Rank of matrix"""

import numpy as np
a=np.arange(16).reshape(4,4)
print('first matrix')
print(a)

b=np.linalg.matrix_rank(a)
print('rank matrix no of linearly independant column')
print(b)

"""12.Determinent of matrix"""

import numpy as np
a=np.array([[22,30],[56,89]])
print("determinent of matrix")
print(np.linalg.det(a))

"""13.INVERSE of matrix"""

import numpy as np
a=np.array([[4,3],[3,2]])
print("inverse of matrix")
b=np.linalg.inv(a)
print(a)
print(b)

"""14.Eigon values and Eigon vectors"""

import numpy as np
from numpy.linalg import eig
a=np.array([[4,3],[3,2]])
print("inverse of matrix")
val,vec=eig(a)
print("eigon value",val)
print("Eigon vector",vec)

"""exersise 3

15.line diagram using matplot lib

"""

import matplotlib.pyplot as plt
import numpy as np
xpoint=np.array([1,2,4,16])
ypoint=np.array([3,12,10,16])
plt.plot(xpoint,ypoint,marker='o',color='r',linestyle=':',mfc='r',mec='g',ms='13')

"""16. draw plot diagram for following data (table given temp and sales)

"""

import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([12,14,16,18,20,22,24])
ypoints = np.array([100,200,250,400,300,450,500])

plt.plot(xpoints, ypoints,marker = 'o',color="red",mec = 'g', mfc = 'g',linestyle = 'dotted')
plt.show()

"""17. [LINE DIGRAM USING TEXT FILE]
python pgm to draw a line using axis values from text file.
"""

import matplotlib.pyplot as plt

with open("3_data.txt") as f:
    data = f.read()
    
data = data.split('\n')

x = [row.split(' ')[0] for row in data]
y = [row.split(' ')[1] for row in data]
plt.plot(x, y)

plt.xlabel('x axis')
plt.ylabel('y axis')
plt.title('graph')
plt.show()

"""18 Multiple lines on same plot"""

import matplotlib.pyplot as plt


x1 = [10,20,30]
y1 = [10,20,30]
plt.plot(x1, y1, label = "line 1")

x2 = [30,40,50]
y2 = [30,40,50]
plt.plot(x2, y2, label = "line 2")

plt.xlabel('x axis')
plt.ylabel('y axis')

plt.title('Two Line plot')

plt.legend()
plt.show()

"""19 - create** multiple plots**"""

import matplotlib.pyplot as plt

figure, axis = plt.subplots(1,2)

dt=0.01
x1 = [10,20,30]
y1 = [10,20,30]
axis[0].plot(x1,y1)
#axis[0,0].plot(x1,y1)
axis[0].set_title("Plot 1")

x2 = [10,10,10]
y2 = [30,40,50]
axis[1].plot(x2, y2)
#axis[0,1].plot(x2, y2)
axis[1].set_title("Plot 2")

#figure.tight_layout()
plt.show()

"""EXTRA >>>>>>>>>>>>>
Consider the following data.
Programming languages: Java  Python  PHP  JavaScript  C#  C++
Popularity             22.2  17.6    8.8  8           77  6.7

(i) Write a Python programming to display a** bar chart**
    of the popularity of programming Languages.
"""

import numpy as np
import matplotlib.pyplot as plt


# creating the dataset
data = {'Java':22.2, 'Python':17.6, 'PHP':8.8,'JavaScript':8,'C#':77,'C++':6.7}

courses = list(data.keys())
values = list(data.values())

fig = plt.figure(figsize = (10, 5))

# creating the bar plot
plt.bar(courses, values, color ='maroon',width = 0.4)

plt.xlabel("Programming languages")
plt.ylabel("Popularity")
plt.title("Popularity of Programming languages")
plt.show()

"""EXTRAAA>>>>>>>>>
Write a Python program to create** bar plot** of
scores by group and gender. Use multiple X values on 
the same chart for men and women.

Sample Data:
Means (men) = (22, 30, 35, 35, 26)
Means (women) = (25, 32, 30, 35, 29)

"""

import numpy as np
import matplotlib.pyplot as plt

y1 = [22,30,35,35,26]
y2 = [25,32,30,35,29]
x_labels = ['G1','G2','G3','G4','G5']
x1 = np.arange(5)
width = 0.40

plt.bar(x1-0.2,y1,color="green",width=width,label='Men')
plt.bar(x1+0.2,y2,color="red",width=width,label='Women')
plt.xticks(x1,x_labels)



plt.xlabel("Person")
plt.ylabel("Scores")
plt.legend()

plt.title("scores by group and gender")
plt.show()

"""EXTRAA
 Write a Python programming to create a **pie chart**
   of the popularity of programming Languages.

   
Programming languages: Java Python PHP JavaScript C# C++
Popularity           : 22.2 17.6   8.8 8          7.7 6.7
"""

import matplotlib.pyplot as plt
import numpy as np

y = np.array([22.2,17.6,8.8,8,7.7,6.7])
mylabels = ["Java", "Python", "PHP", "JavaScript", "C#", "C++"]

plt.pie(y, labels = mylabels)
plt.show()

"""programm 20

**SCATTER PLOT**
Write a Python program to draw a scatter plot comparing two subject
marks of Mathematics and 
Science. Use marks of 10 students.

Sample data:
Test Data:

math_marks = [88, 92, 80, 89, 100, 80, 60, 100, 80, 34]
science_marks = [35, 79, 79, 48, 100, 88, 32, 45, 20, 30]
marks_range = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
"""

import matplotlib.pyplot as plt

x = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
m = [88, 92, 80, 89, 100, 80, 60, 100, 80, 34]
s = [35, 79, 79, 48, 100, 88, 32, 45, 20, 30]

plt.scatter(x, m,label="maths marks")
plt.scatter(x, s,label="science marks")
plt.legend(loc='upper right')

plt.xlabel("Marks Range")
plt.ylabel("Marks Scored")
plt.title("Scatter plot")
plt.show()

"""**PANDAAASSS**

'''
21. Write a python program to implement List-to-Series Conversion

'''
"""

import pandas as pd

names = ['a','b','c']
x = pd.Series(names)
print(names)

"""'''
22. Write a python program to Generate the series of dates from
1st May, 2021 to 12th May, 2021 (both inclusive).

'''


"""

import pandas as pd

sr = pd.Series(pd.date_range('2021-05-01','2021-05-12',freq = 'D'))
# To avoid dtype
# Series.to_string
print(sr.to_string(index=False))

"""23. Given a dictionary, convert it into
corresponding dataframe and display it.

'''

"""

import pandas as pd

details = {
    'Name' : ['a','b','c','d'],
    'Age' : [24,25,26,27],
}
  

df = pd.DataFrame(details)
  
print(df)

"""24 Given a 2D List, convert it into corresponding dataframe and display it.

'''



"""

import pandas as pd

details = [[1,2],[3,4]]
  
df = pd.DataFrame(details)
  
print(df)

"""'''
25. Given a CSV file, read it into a dataframe and display it.

'''



"""

import pandas as pd

df = pd.read_csv('5_Pandas.csv')

print(df.to_string())

"""EXTRAA

'''
6. Given a dataframe, sort it by multiple columns.

'''


import pandas as pd

df = pd.DataFrame({'Name': ['e','a','a','b','c','d'],
                   'Age': [1,2,1,3,3,4],
                   'Rank': [0,1,2,3,4,5]})

print(df.to_string())

print('SORTED DATAFRAME')
df = df.sort_values(by=['Name','Age'], ascending=[True,True])

print(df.to_string())


7. Given a dataframe with custom indexing,
   convert and it to default indexing and 
   display it.


'''


import pandas as pd

data = {'Name': ['e','a','a','b','c','d'],
                   'Age': [1,2,1,3,3,4],
                   'Rank': [0,1,2,3,4,5]}

index = {'a1', 'b1', 'c1', 'd1', 'e1','f1'}

df = pd.DataFrame(data,index)
#df.reset_index(inplace = True)
print(df.to_string())
df.reset_index(inplace = True, drop = True)
print(df.to_string())

'''
11. Given is a dataframe showing Company Names (cname) and corresponding Profits 
(profit). Convert the values of Profit column such that values in it greater than 0 are 
set to True and the rest are set to False.


'''


import pandas as pd

details = {
    'cname' : ['a','b','c','d'],
    'profit' : [24,25,0,-27],
}

df = pd.DataFrame(details)

df.loc[df.profit <= 0,'profit'] = False
df.loc[df.profit > 0,'profit'] = True
print(df)

#df['profit'] = df['profit'].apply(lambda x:x>0)
#print(df)

26 display first two rows and output them
"""

import pandas as pd
data=[['java','2000','200'],
['cpp','3000','300'],['c','4000','400']]
df=pd.DataFrame(data)
print(df.head(2))

"""27 Given is a dataframe showing name, occupation,
   salary of people. Find the average 
   salary per occupation.


'''



"""

import pandas as pd

details = {
    'Name' : ['a','b','c','d','e'],
    'Occupation' : ['A1','A1','A1','B1','B1'],
    'Salary' : [20,30,40,27,23],
}
  

df = pd.DataFrame(details)
print(df)
occ_average_age = df.groupby('Occupation')['Salary'].mean()
print("Average salary per occupation : ")
print(occ_average_age)

"""'''
28. Given are 2 dataframes, with one dataframe containing Employee ID (eid), Employee 
Name (ename) and Stipend (stipend) and the other dataframe containing Employee ID 
(eid) and designation of the employee (designation). Output the Dataframe containing 
Employee ID (eid), Employee Name (ename), Stipend (stipend) and Position 
(position).

'''



"""

import pandas as pd

details_1 = {
    'eid' : [1,2,3,4],
    'ename' : ['a','b','c','d'],
    'stipend':[123,131,23,434],
}

details_2 = {
    'eid' : [1,2,3,4],
    'designation' : ['aa','bb','cc','dd'],
}

df_1 = pd.DataFrame(details_1)
df_2 = pd.DataFrame(details_2)

dataframe = pd.merge(df_1, df_2, how = 'inner', on = 'eid')
print(dataframe)

"""***29. KNN CLASSIFICATION***"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics

iris = load_iris()
x = iris.data
y = iris.target
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=1)
c_knn = KNeighborsClassifier(n_neighbors=3)
c_knn.fit(x_train,y_train)
y_pred = c_knn.predict(x_test)
print("Accuracy : ",metrics.accuracy_score(y_test,y_pred))
sample = [[2,2,2,2]]
pred = c_knn.predict(sample)
pred_v = [iris.target_names[p] for p in pred]
print(pred_v)

"""30
NAIVE BAYES ALGORITHM
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

X,y=load_iris(return_X_y=True)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=0)
gnb=GaussianNB()
y_pred=gnb.fit(X_train,y_train).predict(X_test)
print(y_pred)
x_new=[[5,5,4,4]]
y_new=gnb.fit(X_train,y_train).predict(x_new)
from sklearn.metrics import confusion_matrix  
cm = confusion_matrix(y_test, y_pred)  
print ("CM", cm)
print("\n")
print("predicted output for [[5,5,4,4]]:",y_new)
print("Naive bayes score               :",gnb.score(X_test,y_test))

"""31 
*DECISION TREE*
"""

from sklearn.datasets import load_iris
from sklearn import metrics
from sklearn import tree
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

iris=load_iris()
x=iris.data
y=iris.target
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=1)

clf=DecisionTreeClassifier()
clf=clf.fit(x_train,y_train)
y_pred=clf.predict(x_test)
print("Accuracy: ",metrics.accuracy_score(y_test,y_pred))

plt.figure(figsize=(15,15))
tree.plot_tree(clf,fontsize=10,filled=True,rounded=True,class_names=iris.target_names,feature_names=iris.feature_names)
plt.show()

"""32.
***REGRESSION***

33**.SUPPORT VECTOR MACHINE SVM**
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.svm import SVC

iris = load_iris()
x = iris.data
y = iris.target
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=1)


classifier = SVC(kernel='linear', random_state=0)  
classifier.fit(x_train, y_train)  
y_pred= classifier.predict(x_test)  

print("Accuracy : ",metrics.accuracy_score(y_test,y_pred))

sample = [[1,1,1,2]]
pred = classifier.predict(sample)
pred_v = [iris.target_names[p] for p in pred]
print(pred_v)

"""34. 
**K-MEANS CLUSTURING**
"""

from sklearn import datasets
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.cluster import KMeans

iris = datasets.load_iris()
X = iris.data[:, :2]
y = iris.target
km = KMeans(n_clusters = 3, init='k-means++', n_init=10, max_iter=300, tol=0.0001, verbose=0, random_state=21, copy_x=True, algorithm="auto")
km.fit(X)
centers = km.cluster_centers_
print(centers)
new_labels = km.labels_
print(new_labels)
print(y)

from sklearn import datasets
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.cluster import KMeans

iris = datasets.load_iris()
X = iris.data[:, :2]
y = iris.target

plt.scatter(X[:,0], X[:,1], c=y, cmap='prism')
plt.xlabel('Spea1 Length', fontsize=18)
plt.ylabel('Sepal Width', fontsize=18)

km = KMeans(n_clusters = 3, init='k-means++', n_init=10, max_iter=300, tol=0.0001, verbose=0, random_state=21, copy_x=True, algorithm="auto")
km.fit(X)
centers = km.cluster_centers_
print(centers)
new_labels = km.labels_
print(new_labels)
print(y)




fig, axes = plt.subplots( 1,2, figsize=(16,8))
axes[0].scatter(X[:, 0], X[:, 1], c=y, cmap='prism',edgecolor='k', s=75)
axes[1].scatter(X[:, 0], X[:, 1], c=new_labels, cmap='jet',edgecolor='k', s=75)
axes[0].set_xlabel('Sepal length', fontsize=12)
axes[0].set_ylabel('Sepal width', fontsize=12)
axes[1].set_xlabel('Sepal length', fontsize=12)
axes[1].set_ylabel('Sepal width', fontsize=12)
axes[0].tick_params(direction='in', length=10, width=5, colors='k', labelsize=15)
axes[1].tick_params(direction='in', length=10, width=5, colors='k', labelsize=15)
axes[0].set_title('Actual', fontsize=18)
axes[1].set_title('Predicted', fontsize=18)